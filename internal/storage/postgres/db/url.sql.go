// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: url.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClick = `-- name: CreateClick :exec
INSERT INTO clicks (url_id, user_agent, ip_address)
VALUES ($1, $2, $3)
`

type CreateClickParams struct {
	UrlID     int64       `json:"url_id"`
	UserAgent pgtype.Text `json:"user_agent"`
	IpAddress *netip.Addr `json:"ip_address"`
}

// Inserts a new click record for analytics.
func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) error {
	_, err := q.db.Exec(ctx, createClick, arg.UrlID, arg.UserAgent, arg.IpAddress)
	return err
}

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url)
VALUES ($1)
RETURNING id, original_url, short_code, created_at
`

// Inserts a new URL record with the original URL.
func (q *Queries) CreateURL(ctx context.Context, originalUrl string) (Url, error) {
	row := q.db.QueryRow(ctx, createURL, originalUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CreatedAt,
	)
	return i, err
}

const getClicksByURLID = `-- name: GetClicksByURLID :many
SELECT id, url_id, created_at, user_agent, ip_address
FROM clicks
WHERE url_id = $1
ORDER BY created_at DESC
`

// Retrieves all click records for a given URL, ordered by the most recent.
func (q *Queries) GetClicksByURLID(ctx context.Context, urlID int64) ([]Click, error) {
	rows, err := q.db.Query(ctx, getClicksByURLID, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Click
	for rows.Next() {
		var i Click
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.CreatedAt,
			&i.UserAgent,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, original_url, short_code, created_at
FROM urls
WHERE short_code = $1
`

// Retrieves a URL record by its unique short code.
func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode pgtype.Text) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CreatedAt,
	)
	return i, err
}

const updateURLShortCode = `-- name: UpdateURLShortCode :exec
UPDATE urls
SET short_code = $2
WHERE id = $1
`

type UpdateURLShortCodeParams struct {
	ID        int64       `json:"id"`
	ShortCode pgtype.Text `json:"short_code"`
}

// Updates a URL record with its generated short code.
func (q *Queries) UpdateURLShortCode(ctx context.Context, arg UpdateURLShortCodeParams) error {
	_, err := q.db.Exec(ctx, updateURLShortCode, arg.ID, arg.ShortCode)
	return err
}
