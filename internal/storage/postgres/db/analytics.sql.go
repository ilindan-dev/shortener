// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: analytics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getClicksByPeriod = `-- name: GetClicksByPeriod :many
SELECT
    date_trunc($1::text, created_at)::date AS key,
    count(*) AS value
FROM clicks
WHERE url_id = $2
GROUP BY key
ORDER BY key DESC
`

type GetClicksByPeriodParams struct {
	Period string `json:"period"`
	UrlID  int64  `json:"url_id"`
}

type GetClicksByPeriodRow struct {
	Key   pgtype.Date `json:"key"`
	Value int64       `json:"value"`
}

// Aggregates click counts for a given URL ID over a specified time period (e.g., 'day', 'month').
func (q *Queries) GetClicksByPeriod(ctx context.Context, arg GetClicksByPeriodParams) ([]GetClicksByPeriodRow, error) {
	rows, err := q.db.Query(ctx, getClicksByPeriod, arg.Period, arg.UrlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClicksByPeriodRow
	for rows.Next() {
		var i GetClicksByPeriodRow
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClicksByPeriodAndUserAgent = `-- name: GetClicksByPeriodAndUserAgent :many
SELECT
    date_trunc($1::text, created_at)::date AS time_key,
    COALESCE(user_agent, 'Unknown') AS ua_key,
    count(*) as value
FROM clicks
WHERE url_id = $2
GROUP BY time_key, ua_key
ORDER BY time_key DESC, value DESC
`

type GetClicksByPeriodAndUserAgentParams struct {
	Period string `json:"period"`
	UrlID  int64  `json:"url_id"`
}

type GetClicksByPeriodAndUserAgentRow struct {
	TimeKey pgtype.Date `json:"time_key"`
	UaKey   string      `json:"ua_key"`
	Value   int64       `json:"value"`
}

// Aggregates click counts grouped by both a time period AND User-Agent.
func (q *Queries) GetClicksByPeriodAndUserAgent(ctx context.Context, arg GetClicksByPeriodAndUserAgentParams) ([]GetClicksByPeriodAndUserAgentRow, error) {
	rows, err := q.db.Query(ctx, getClicksByPeriodAndUserAgent, arg.Period, arg.UrlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClicksByPeriodAndUserAgentRow
	for rows.Next() {
		var i GetClicksByPeriodAndUserAgentRow
		if err := rows.Scan(&i.TimeKey, &i.UaKey, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClicksByUserAgent = `-- name: GetClicksByUserAgent :many
SELECT
    COALESCE(user_agent, 'Unknown') AS key,
    count(*) as value
FROM clicks
WHERE url_id = $1
GROUP BY key
ORDER BY value DESC
`

type GetClicksByUserAgentRow struct {
	Key   string `json:"key"`
	Value int64  `json:"value"`
}

// Aggregates click counts for a given URL ID, grouped by User-Agent.
func (q *Queries) GetClicksByUserAgent(ctx context.Context, urlID int64) ([]GetClicksByUserAgentRow, error) {
	rows, err := q.db.Query(ctx, getClicksByUserAgent, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClicksByUserAgentRow
	for rows.Next() {
		var i GetClicksByUserAgentRow
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
